{"version":3,"sources":["reducers/itemReducer.js","reducers/errorReducer.js","reducers/authReducer.js","reducers/index.js","actions/types.js","store.js","actions/authActions.js","components/TopNavbar.js","components/page/Signin.js","actions/errorActions.js","components/page/SyllabusPlanning.js","components/page/Course.js","components/common/PrivateRoute.js","App.js","index.js"],"names":["initialState","items","loading","auth","token","localStorage","getItem","isAuthenticated","isLoading","user","combineReducers","item","state","action","type","payload","filter","_id","error","setItem","removeItem","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","tokenConfig","getState","config","headers","faHome","faUserTie","faChalkboardTeacher","faUserGraduate","TopNavbar","props","dispatch","useDispatch","useSelector","useHistory","React","useState","Navbar","bg","variant","expand","sticky","Brand","Fragment","Nav","className","Button","onClick","icon","faSignOutAlt","fixedWidth","Signin","history","username","setUsername","password","setPassword","useEffect","console","log","push","Object","keys","length","Container","Jumbotron","Form","noValidate","onSubmit","e","preventDefault","body","JSON","stringify","axios","post","process","then","res","data","catch","err","response","login","Group","controlId","InputGroup","Prepend","Text","faUser","Control","placeholder","value","onChange","target","isInvalid","hasOwnProperty","required","Feedback","faLock","student","id","undefined","name","age","gender","students","Array","fill","map","i","newStudent","parse","Math","random","floor","course","center","level","courseType","lastLesson","lastLessonDate","tutors","reviewer","lessons","courseStatus","reviewStatus1","reviewStatus2","courses","start","end","newCourse","round","Date","getTime","setHours","c","d","randomStudentList","newStd","find","j","sort","a","b","regular","summer","mu","review","Home","toLessonPage","courseId","mode","Row","Col","Card","Body","Title","Badge","Table","striped","hover","borderless","responsive","style","width","cursor","key","s","sIdx","charAt","ProgressBar","label","now","moment","format","randomDate","lesson","lessonNumber","lessonDate","tutor","makeupTutor","customAssessment","objectives","randomDateList","newDate","newLesson","LessonDate","studentReports","Course","tempSR","setTempSR","updateStudentReports","val","studentName","reportIdx","objAssessmentIdx","attr","prevState","newStudentReports","assign","reports","objectiveAssessment","grade","modified","lastModified","Tab","defaultActiveKey","sm","Item","Link","eventKey","Content","studentNameIdx","Pane","Accordion","report","Toggle","as","Header","remarks","OverlayTrigger","placement","overlay","Tooltip","faMarker","color","faBinoculars","faSave","Collapse","objAssessment","borderBottom","Label","column","content","initialRating","emptySymbol","faStar","fullSymbol","faSolidStar","rate","includes","defaultValue","onBlur","Alert","show","disabled","forEach","l","lIdx","newReport","assessmentType","o","oIdx","connect","Component","component","rest","render","Spinner","animation","role","to","Wrapper","get","basename","fluid","path","exact","SyllabusPlanning","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7a9d62d2.chunk.js","sourcesContent":["import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    loading: false\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                loading: false\r\n            };\r\n        case DELETE_ITEM:\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item._id !== action.payload)\r\n            };\r\n        case ADD_ITEM:\r\n            return {\r\n                ...state,\r\n                items: [action.payload, ...state.items]\r\n            };\r\n        case ITEMS_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    UPDATE_AUTH_ERRORS,\r\n    CLEAR_AUTH_ERRORS\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    auth: {},\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        // case GET_ERRORS:\r\n        //     return {\r\n        //         msg: action.payload.msg,\r\n        //         status: action.payload.status,\r\n        //         id: action.payload.id,\r\n        //     };\r\n        // case CLEAR_ERRORS:\r\n        //     return {\r\n        //         msg: {},\r\n        //         status: null,\r\n        //         id: null\r\n        //     };\r\n        case UPDATE_AUTH_ERRORS:\r\n            return {\r\n                ...state,\r\n                auth: action.payload\r\n            };\r\n        case CLEAR_AUTH_ERRORS:\r\n            return {\r\n                ...state,\r\n                auth: {},\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    USER_LOADED,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    token: localStorage.getItem('token'),\r\n    isAuthenticated: false,\r\n    isLoading: true,\r\n    user: null\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            };\r\n        case USER_LOADED:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: true,\r\n                isLoading: false,\r\n                user: action.payload\r\n            };\r\n        case LOGIN_SUCCESS:\r\n        case REGISTER_SUCCESS:\r\n            localStorage.setItem('token', action.payload.token);\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuthenticated: true,\r\n                isLoading: false\r\n            };\r\n        case AUTH_ERROR:\r\n        case LOGIN_FAIL:\r\n        case LOGOUT_SUCCESS:\r\n        case REGISTER_FAIL:\r\n            localStorage.removeItem('token');\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                user: null,\r\n                isAuthenticated: false,\r\n                isLoading: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport itemReducer from './itemReducer';\r\nimport errorReducer from './errorReducer';\r\nimport authReducer from './authReducer';\r\n\r\nexport default combineReducers({\r\n    item: itemReducer,\r\n    error: errorReducer,\r\n    auth: authReducer\r\n});","export const GET_ITEMS = 'GET_ITEMS';\r\nexport const ADD_ITEM = 'ADD_ITEM';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\nexport const ITEMS_LOADING = 'ITEMS_LOADING';\r\n\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const USER_LOADED = \"USER_LOADED\";\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\r\nexport const GET_ERRORS = 'GET_ERRORS';\r\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\r\n\r\nexport const CLEAR_AUTH_ERRORS = 'CLEAR_AUTH_ERRORS';\r\nexport const UPDATE_AUTH_ERRORS = 'UPDATE_AUTH_ERRORS';","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import axios from 'axios';\r\nimport { clearAuthErrors, returnErrors, updateAuthErrors } from './errorActions';\r\n\r\nimport {\r\n    USER_LOADED,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n\r\n    UPDATE_AUTH_ERRORS,\r\n    CLEAR_AUTH_ERRORS\r\n} from './types';\r\n\r\n// Check token & load user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n    // User loading\r\n    dispatch({ type: USER_LOADING });\r\n\r\n    axios\r\n        .get(`${process.env.REACT_APP_BACKEND_URL}/api/auth/user`, tokenConfig(getState))\r\n        .then(res => {\r\n            // console.log(res.data);\r\n            dispatch({\r\n                type: USER_LOADED,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            // dispatch(returnErrors(err.response.data, err.response.status));\r\n            dispatch({\r\n                type: AUTH_ERROR\r\n            });\r\n        });\r\n};\r\n\r\n// Register User\r\nexport const register = ({ name, email, password }) => dispatch => {\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // Request body\r\n    const body = JSON.stringify({ name, email, password });\r\n\r\n    axios\r\n        .post(`${process.env.REACT_APP_BACKEND_URL}/api/users`, body, config)\r\n        .then(res =>\r\n            dispatch({\r\n                type: REGISTER_SUCCESS,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => {\r\n            dispatch(\r\n                returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL')\r\n            );\r\n            dispatch({\r\n                type: REGISTER_FAIL\r\n            });\r\n        });\r\n};\r\n\r\n// Login User\r\nexport const login = ({ username, password }) => dispatch => {\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // Request body\r\n    const body = JSON.stringify({ username, password });\r\n\r\n    axios\r\n        .post(`${process.env.REACT_APP_BACKEND_URL}/api/auth`, body, config)\r\n        .then(res =>\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => {\r\n            console.log(err);\r\n            dispatch(clearAuthErrors());\r\n            dispatch(updateAuthErrors(err.response.data));\r\n            dispatch({\r\n                type: LOGIN_FAIL\r\n            });\r\n        });\r\n};\r\n\r\n// Logout User\r\nexport const logout = () => {\r\n    return {\r\n        type: LOGOUT_SUCCESS\r\n    };\r\n};\r\n\r\n// Setup config/headers and token\r\nexport const tokenConfig = getState => {\r\n    // Get token from localstorage\r\n    const token = getState().auth.token;\r\n\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers\r\n    if (token) {\r\n        config.headers['x-auth-token'] = token;\r\n    }\r\n\r\n    return config;\r\n};","import React from 'react'\r\n\r\nimport { Switch, Route, useHistory, Link } from 'react-router-dom'\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { logout } from \"../actions/authActions\"\r\n\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faUserGraduate, faChalkboardTeacher, faUserTie, faSignOutAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst navLinkList = [\r\n    { to: \"/\", icon: faHome, text: \"Home\" },\r\n    { to: \"/\", icon: faUserTie, text: \"Tutor\" },\r\n    { to: \"/\", icon: faChalkboardTeacher, text: \"Class\" },\r\n    { to: \"/signin\", icon: faUserGraduate, text: \"Student\" },\r\n]\r\n\r\nexport default function TopNavbar(props) {\r\n    const dispatch = useDispatch();\r\n    const auth = useSelector(state => state.auth);\r\n    const history = useHistory();\r\n\r\n    const [activeNavLink, setActiveNavLink] = React.useState(0);\r\n\r\n    const signoutBtnClick = () => {\r\n        dispatch(logout());\r\n    }\r\n\r\n    return (\r\n        <Navbar\r\n            // collapseOnSelect\r\n            bg=\"dark\"\r\n            variant=\"dark\"\r\n            expand=\"lg\"\r\n            sticky=\"top\"\r\n        >\r\n            <Navbar.Brand>Home</Navbar.Brand>\r\n            {\r\n                auth.isAuthenticated === true ? (\r\n                    <React.Fragment>\r\n                        <Nav className=\"mr-auto\">\r\n                        </Nav>\r\n                        <Nav>\r\n                            <Button variant=\"outline-warning\" onClick={() => signoutBtnClick()}><FontAwesomeIcon icon={faSignOutAlt} fixedWidth />Sign Out</Button>\r\n                        </Nav>\r\n                    </React.Fragment>\r\n                ) : null}\r\n\r\n            {/* <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" /> */}\r\n            {/* <Navbar.Collapse id=\"responsive-navbar-nav\"> */}\r\n            {/* <Nav className=\"mr-auto\"> */}\r\n            {/* <Nav.Item>a</Nav.Item> */}\r\n            {/* <Nav.Item>b</Nav.Item> */}\r\n            {/* </Nav> */}\r\n            {/* <Nav activeKey={activeNavLink} onSelect={(selectedKey) => setActiveNavLink(selectedKey)}> */}\r\n            {/* <Nav.Link as={Link} to=\"/\" eventKey=\"link-home\"><FontAwesomeIcon icon={faHome} fixedWidth />Home</Nav.Link> */}\r\n            {/* <Nav.Link as={Link} to=\"/signin\" eventKey=\"link-signin\"><FontAwesomeIcon icon={faUserGraduate} fixedWidth />Student</Nav.Link> */}\r\n            {\r\n                // navLinkList.map((e, i) => (\r\n                //     <Nav.Link as={Link} to={e.to} eventKey={i}><FontAwesomeIcon icon={e.icon} fixedWidth />{' '}{e.text}</Nav.Link>\r\n                // )\r\n                // )\r\n            }\r\n            {/* </Nav> */}\r\n            {/* </Navbar.Collapse> */}\r\n        </Navbar>\r\n    );\r\n\r\n}","import React from 'react'\r\n\r\nimport { Switch, Route, useHistory, Link } from 'react-router-dom'\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { login } from \"../../actions/authActions\"\r\n\r\nimport Container from 'react-bootstrap/Container'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Form from 'react-bootstrap/Form'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport Button from 'react-bootstrap/Button'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser, faLock } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default function Signin(props) {\r\n    const dispatch = useDispatch();\r\n    const auth = useSelector(state => state.auth);\r\n    const error = useSelector(state => state.error);\r\n    const history = useHistory();\r\n\r\n    const [username, setUsername] = React.useState('');\r\n    const [password, setPassword] = React.useState('');\r\n\r\n    // const [usernameInvalid, setUsernameInvalid] = React.useState(false);\r\n    // const [passwordInvalid, setPasswordInvalid] = React.useState(false);\r\n\r\n    const signinSubmit = e => {\r\n        e.preventDefault();\r\n        // setUsernameInvalid(false);\r\n        // setPasswordInvalid(false);\r\n        // if (username === '' || password === '') {\r\n        //     if (username === '') setUsernameInvalid(true);\r\n        //     if (password === '') setPasswordInvalid(true);\r\n        //     console.log('error');\r\n        //     return\r\n        // } else {\r\n        //     console.log('sign in');\r\n        //     dispatch(login({ username, password }));\r\n        // }\r\n        dispatch(login({ username, password }));\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (auth.isAuthenticated === true) {\r\n            console.log('login success');\r\n            history.push(\"/\");\r\n        }\r\n    }, [auth, history])\r\n\r\n    React.useEffect(() => {\r\n        if (Object.keys(error.auth).length !== 0) {\r\n            console.log('auth error');\r\n            console.log(error.auth)\r\n        }\r\n    }, [error])\r\n\r\n    return (\r\n        <Container className=\"p-5\">\r\n            <Jumbotron>\r\n                <h1 className=\"header\">Welcome To ABC</h1>\r\n                <Form noValidate onSubmit={signinSubmit}>\r\n                    <Form.Group controlId=\"formUsername\">\r\n                        <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    <FontAwesomeIcon icon={faUser} fixedWidth />\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                placeholder=\"Username\"\r\n                                value={username}\r\n                                onChange={(e) => (setUsername(e.target.value))}\r\n                                // isInvalid={usernameInvalid}\r\n                                isInvalid={error.auth.hasOwnProperty('username')}\r\n                                required\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {\r\n                                    error.auth.hasOwnProperty('username') ? error.auth.username : ''\r\n                                }\r\n                            </Form.Control.Feedback>\r\n                        </InputGroup>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formPassword\">\r\n                        <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    <FontAwesomeIcon icon={faLock} fixedWidth />\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                placeholder=\"Password\"\r\n                                value={password}\r\n                                onChange={(e) => (setPassword(e.target.value))}\r\n                                // isInvalid={passwordInvalid}\r\n                                isInvalid={error.auth.hasOwnProperty('password')}\r\n                                required\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {\r\n                                    error.auth.hasOwnProperty('password') ? error.auth.password : ''\r\n                                }\r\n                            </Form.Control.Feedback>\r\n                        </InputGroup>\r\n                    </Form.Group>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Sign In\r\n                    </Button>\r\n                </Form>\r\n            </Jumbotron>\r\n        </Container>\r\n    );\r\n\r\n}","import { GET_ERRORS, CLEAR_ERRORS, UPDATE_AUTH_ERRORS, CLEAR_AUTH_ERRORS } from './types';\r\n\r\n// RETURN ERRORS\r\nexport const returnErrors = (msg, status, id = null) => {\r\n    return {\r\n        type: GET_ERRORS,\r\n        payload: { msg, status, id }\r\n    };\r\n};\r\n\r\n// CLEAR ERRORS\r\nexport const clearErrors = () => {\r\n    return {\r\n        type: CLEAR_ERRORS\r\n    };\r\n};\r\n\r\n// UPDATE AUTH ERRORS\r\nexport const updateAuthErrors = (data) => {\r\n    return {\r\n        type: UPDATE_AUTH_ERRORS,\r\n        payload: data\r\n    };\r\n};\r\n\r\n// CLEAR AUTH ERRORS\r\nexport const clearAuthErrors = () => {\r\n    return {\r\n        type: CLEAR_AUTH_ERRORS\r\n    };\r\n};","import React from 'react'\r\n\r\nimport { Switch, Route, useHistory, Link, NavLink } from 'react-router-dom'\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nimport Container from 'react-bootstrap/Container'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ProgressBar from 'react-bootstrap/ProgressBar'\r\n\r\nimport { faUserTie, faGraduationCap, faChalkboardTeacher } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport axios from 'axios'\r\nimport HomeCard from '../HomeCard'\r\nimport moment from 'moment'\r\n\r\nvar student = {\r\n    id: undefined,\r\n    name: undefined,\r\n    age: undefined,\r\n    gender: undefined,\r\n}\r\nvar students = new Array(10).fill().map((e, i) => {\r\n    let newStudent = JSON.parse(JSON.stringify(student));\r\n    newStudent.id = i + 1;\r\n    newStudent.name = `Student ${i + 1}`;\r\n    newStudent.gender = Math.random() > 0.5 ? 'Female' : 'Male';\r\n    newStudent.age = Math.floor(Math.random() * (15 - 9 + 1)) + 9;\r\n    return newStudent;\r\n});\r\n// console.log(students);\r\n// console.log(Math.round(Math.random() * 1 + 1))\r\n// console.log(Math.random() > 0.5 ? 'Female' : 'Male')\r\n\r\nvar course = {\r\n    id: undefined,\r\n    name: undefined,\r\n    center: undefined,\r\n    level: undefined,\r\n    courseType: undefined,\r\n    lastLesson: undefined,\r\n    lastLessonDate: undefined,\r\n    tutors: undefined,\r\n    students: undefined,\r\n    reviewer: undefined,\r\n    lessons: undefined,\r\n    courseStatus: undefined,\r\n    reviewStatus1: undefined,\r\n    reviewStatus2: undefined,\r\n}\r\nfunction randomDate(start, end) {\r\n    return new Date(new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).setHours(0, 0, 0, 0));\r\n}\r\nvar courses = new Array(10).fill().map((e, i) => {\r\n    let newCourse = JSON.parse(JSON.stringify(course));\r\n    newCourse.id = i + 1;\r\n    newCourse.name = `Course ${i + 1}`;\r\n    newCourse.center = Math.random() > 0.5 ? 'Center A' : 'Center B';\r\n    newCourse.level = Math.round(Math.random() * 2 + 1);\r\n    newCourse.courseType = Math.random() > 0.5 ? Math.random() > 0.5 ? Math.random() > 0.5 ? 'Makeup Class' : 'Summer Camp' : 'Review' : 'Normal';\r\n    newCourse.lastLessonDate = randomDate(new Date(2019, 6, 1), new Date());\r\n    newCourse.tutors = [1];\r\n    // newCourse.students = new Array(3).fill().map((a, b) => students[Math.floor(Math.random() * 10)]);\r\n    newCourse.reviewer = 2;\r\n    newCourse.lessons = newCourse.courseType !== 'Summer Camp' ? new Array(12).fill().map((c, d) => d) : new Array(6).fill().map((c, d) => d);\r\n    newCourse.lastLesson = Math.floor(Math.random() * newCourse.lessons.length) + 1;\r\n    newCourse.courseStatus = newCourse.lastLesson === newCourse.lessons.length ? Math.random() > 0.5 ? 'Require Report' : 'Completed' : 'Ongoing';\r\n    // newCourse.courseStatus = Math.random() > 0.5 ? 'Await Report Submit' : Math.random() > 0.5 ? 'Await Review' : Math.random() > 0.5 ? 'Ongoing' : 'Completed';\r\n    newCourse.reviewStatus1 = newCourse.lastLesson >= newCourse.lessons.length / 2 ? Math.random() > 0.5 ? 'Require 1st Review' : 'Reviewed' : 'Await Report';\r\n    newCourse.reviewStatus2 = newCourse.lastLesson === newCourse.lessons.length ? newCourse.reviewStatus1 === 'Reviewed' ? Math.random() > 0.5 ? 'Require 2nd Review' : 'Reviewed' : 'Await 1st Review' : 'Await Report';\r\n    let randomStudentList = [];\r\n    for (var j = 0; j < 3; j++) {\r\n        let newStd = students[Math.floor(Math.random() * 10)];\r\n        while (!!randomStudentList.find(item => { return item.id == newStd.id })) {\r\n            newStd = students[Math.floor(Math.random() * 10)];\r\n        }\r\n        randomStudentList.push(newStd);\r\n    }\r\n    randomStudentList.sort(function (a, b) {\r\n        return a.id - b.id;\r\n    });\r\n    newCourse.students = randomStudentList;\r\n    return newCourse;\r\n});\r\n\r\n// console.log(courses)\r\n\r\nvar regular = courses.filter(c => c.courseType === 'Normal');\r\nregular.sort((a, b) => b.lastLessonDate - a.lastLessonDate);\r\nvar summer = courses.filter(c => c.courseType === 'Summer Camp');\r\nsummer.sort((a, b) => b.lastLessonDate - a.lastLessonDate);\r\nvar mu = courses.filter(c => c.courseType === 'Makeup Class');\r\nmu.sort((a, b) => b.lastLessonDate - a.lastLessonDate);\r\nvar review = courses.filter(c => c.courseType === 'Review');\r\nreview.sort((a, b) => b.lastLessonDate - a.lastLessonDate);\r\n\r\n// console.log(regular)\r\n// console.log(summer)\r\n// console.log(mu)\r\n// console.log(review)\r\n\r\n// const regularCourseList = [\r\n//     { id: 1, name: 'A Level 2', branch: 'Branch A', tutor: ['A', 'B'], periodStart: moment(\"2019-08-23\"), periodEnd: moment(\"2019-12-23\"), courseStatus: 'Completed', totalLesson: 12, lastLesson: 12, reviewStatus: 'Completed' },\r\n//     { id: 3, name: 'B Level 2', branch: 'Branch A', tutor: ['A'], periodStart: moment(\"2020-04-10\"), periodEnd: null, courseStatus: 'Ongoing', totalLesson: 12, lastLesson: 7, reviewStatus: 'Ongoing' },\r\n// ]\r\n\r\n// const summerCampList = [\r\n//     { id: 5, name: 'A Level 2 (Summer Camp)', branch: 'Branch A', tutor: ['A', 'B'], periodStart: moment(\"2019-07-14\"), periodEnd: moment(\"2019-08-29\"), courseStatus: 'Completed', totalLesson: 6, lastLesson: 6, reviewStatus: 'Completed' },\r\n//     { id: 6, name: 'B Level 2 (Summer Camp)', branch: 'Branch A', tutor: ['A'], periodStart: moment(\"2020-07-10\"), periodEnd: moment(\"2020-08-29\"), courseStatus: 'Cancelled', totalLesson: 6, lastLesson: 0, reviewStatus: null },\r\n// ]\r\n\r\n// const makeupLessonList = [\r\n//     { id: 2, name: 'C Level 1', branch: 'Branch A', tutor: ['A', 'B'], periodStart: moment(\"2020-04-10\"), periodEnd: null, courseStatus: 'Ongoing', totalLesson: 12, lastLesson: 7, reviewStatus: 'Ongoing' },\r\n// ]\r\n\r\n// const reviewCourseList = [\r\n//     { id: 2, name: 'A Level 2', branch: 'Branch B', tutor: ['B'], periodStart: moment(\"2019-08-23\"), periodEnd: moment(\"2019-12-23\"), courseStatus: 'Completed', totalLesson: 12, lastLesson: 12, reviewStatus: 'Completed' },\r\n//     { id: 4, name: 'B Level 2', branch: 'Branch B', tutor: ['B'], periodStart: moment(\"2020-04-10\"), periodEnd: null, courseStatus: 'Ongoing', totalLesson: 12, lastLesson: 7, reviewStatus: 'Ongoing' },\r\n// ]\r\n\r\nexport default function Home(props) {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const toLessonPage = (courseId, mode) => {\r\n        // history.push(`/course/${courseId}?mode=${mode}`);\r\n        history.push(`/course/${courseId}`);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        // axios.get()\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            {regular.length ? (\r\n                <Row>\r\n                    <Col>\r\n                        <Card\r\n                            className='m-3'\r\n                        >\r\n                            <Card.Body>\r\n                                <Card.Title><Badge variant=\"primary\">Regular Course</Badge></Card.Title>\r\n                                <Table striped hover borderless responsive=\"xl\">\r\n                                    <thead className=\"thead-dark\">\r\n                                        <tr>\r\n                                            <th style={{ width: \"25%\" }}>Name</th>\r\n                                            <th style={{ width: \"5%\" }}>Level</th>\r\n                                            <th style={{ width: \"20%\" }}>Student</th>\r\n                                            <th style={{ width: \"10%\" }}>Center</th>\r\n                                            <th style={{ width: \"10%\" }}>Lesson</th>\r\n                                            <th style={{ width: \"10%\" }}>Course Status</th>\r\n                                            <th style={{ width: \"10%\" }}>Review Status 1</th>\r\n                                            <th style={{ width: \"10%\" }}>Review Status 2</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {\r\n                                            regular.map((e, i) => (\r\n                                                <tr style={{ cursor: 'pointer' }} key={i} onClick={() => toLessonPage(e.id, 'assessment')}>\r\n                                                    <td>{e.name}</td>\r\n                                                    <td>{e.level}</td>\r\n                                                    <td>{e.students.map((s, sIdx) => (`${s.name}(${s.age}${s.gender.charAt(0)})${sIdx < e.students.length - 1 ? '/' : ''}`))}</td>\r\n                                                    <td>{e.center}</td>\r\n                                                    <td>\r\n                                                        <ProgressBar\r\n                                                            label={e.lastLesson}\r\n                                                            variant={e.courseStatus === 'Completed' ? 'success' : e.courseStatus === 'Cancelled' ? 'danger' : 'primary'}\r\n                                                            now={e.courseStatus === 'Cancelled' ? e.lessons.length : Math.round(e.lastLesson / e.lessons.length * 100)}\r\n                                                        />\r\n                                                        <br />\r\n                                                        {moment(e.lastLessonDate).format('MM/DD/YYYY')}\r\n                                                    </td>\r\n                                                    <td>{e.courseStatus}</td>\r\n                                                    <td>{e.reviewStatus1}</td>\r\n                                                    <td>{e.reviewStatus2}</td>\r\n                                                </tr>\r\n                                            ))\r\n                                        }\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            ) : null}\r\n\r\n            {summer.length ? (\r\n                <Row>\r\n                    <Col>\r\n                        <Card\r\n                            className='m-3'\r\n                        >\r\n                            <Card.Body>\r\n                                <Card.Title><Badge variant=\"warning\">Summer Camp</Badge></Card.Title>\r\n                                <Table striped hover borderless responsive=\"xl\">\r\n                                    <thead className=\"thead-dark\">\r\n                                        <tr>\r\n                                            <th style={{ width: \"25%\" }}>Name</th>\r\n                                            <th style={{ width: \"5%\" }}>Level</th>\r\n                                            <th style={{ width: \"20%\" }}>Student</th>\r\n                                            <th style={{ width: \"10%\" }}>Center</th>\r\n                                            <th style={{ width: \"10%\" }}>Lesson</th>\r\n                                            <th style={{ width: \"10%\" }}>Course Status</th>\r\n                                            <th style={{ width: \"10%\" }}>Review Status 1</th>\r\n                                            <th style={{ width: \"10%\" }}>Review Status 2</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {\r\n                                            summer.map((e, i) => (\r\n                                                <tr style={{ cursor: 'pointer' }} key={i} onClick={() => toLessonPage(e.id, 'assessment')}>\r\n                                                    <td>{e.name}</td>\r\n                                                    <td>{e.level}</td>\r\n                                                    <td>{e.students.map((s, sIdx) => (`${s.name}(${s.age}${s.gender.charAt(0)})${sIdx < e.students.length - 1 ? '/' : ''}`))}</td>\r\n                                                    <td>{e.center}</td>\r\n                                                    <td>\r\n                                                        <ProgressBar\r\n                                                            label={e.lastLesson}\r\n                                                            variant={e.courseStatus === 'Completed' ? 'success' : e.courseStatus === 'Cancelled' ? 'danger' : 'primary'}\r\n                                                            now={e.courseStatus === 'Cancelled' ? e.lessons.length : Math.round(e.lastLesson / e.lessons.length * 100)}\r\n                                                        />\r\n                                                        <br />\r\n                                                        {moment(e.lastLessonDate).format('MM/DD/YYYY')}\r\n                                                    </td>\r\n                                                    <td>{e.courseStatus}</td>\r\n                                                    <td>{e.reviewStatus1}</td>\r\n                                                    <td>{e.reviewStatus2}</td>\r\n                                                </tr>\r\n                                            ))\r\n                                        }\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            ) : null}\r\n\r\n            {mu.length ? (\r\n                <Row>\r\n                    <Col>\r\n                        <Card\r\n                            className='m-3'\r\n                        >\r\n                            <Card.Body>\r\n                                <Card.Title><Badge variant=\"info\">Makeup Class</Badge></Card.Title>\r\n                                <Table striped hover borderless responsive=\"xl\">\r\n                                    <thead className=\"thead-dark\">\r\n                                        <tr>\r\n                                            <th style={{ width: \"25%\" }}>Name</th>\r\n                                            <th style={{ width: \"5%\" }}>Level</th>\r\n                                            <th style={{ width: \"20%\" }}>Student</th>\r\n                                            <th style={{ width: \"10%\" }}>Center</th>\r\n                                            <th style={{ width: \"10%\" }}>Lesson</th>\r\n                                            <th style={{ width: \"10%\" }}>Course Status</th>\r\n                                            <th style={{ width: \"10%\" }}>Review Status 1</th>\r\n                                            <th style={{ width: \"10%\" }}>Review Status 2</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {\r\n                                            mu.map((e, i) => (\r\n                                                <tr style={{ cursor: 'pointer' }} key={i} onClick={() => toLessonPage(e.id, 'assessment')}>\r\n                                                    <td>{e.name}</td>\r\n                                                    <td>{e.level}</td>\r\n                                                    <td>{e.students.map((s, sIdx) => (`${s.name}(${s.age}${s.gender.charAt(0)})${sIdx < e.students.length - 1 ? '/' : ''}`))}</td>\r\n                                                    <td>{e.center}</td>\r\n                                                    <td>\r\n                                                        <ProgressBar\r\n                                                            label={e.lastLesson}\r\n                                                            variant={e.courseStatus === 'Completed' ? 'success' : e.courseStatus === 'Cancelled' ? 'danger' : 'primary'}\r\n                                                            now={e.courseStatus === 'Cancelled' ? e.lessons.length : Math.round(e.lastLesson / e.lessons.length * 100)}\r\n                                                        />\r\n                                                        <br />\r\n                                                        {moment(e.lastLessonDate).format('MM/DD/YYYY')}\r\n                                                    </td>\r\n                                                    <td>{e.courseStatus}</td>\r\n                                                    <td>{e.reviewStatus1}</td>\r\n                                                    <td>{e.reviewStatus2}</td>\r\n                                                </tr>\r\n                                            ))\r\n                                        }\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            ) : null}\r\n\r\n            {review.length ? (\r\n                <Row>\r\n                    <Col>\r\n                        <Card\r\n                            className='m-3'\r\n                        >\r\n                            <Card.Body>\r\n                                <Card.Title><Badge variant=\"indigo\">Review Course</Badge></Card.Title>\r\n                                <Table striped hover borderless responsive=\"xl\">\r\n                                    <thead className=\"thead-dark\">\r\n                                        <tr>\r\n                                            <th style={{ width: \"25%\" }}>Name</th>\r\n                                            <th style={{ width: \"5%\" }}>Level</th>\r\n                                            <th style={{ width: \"20%\" }}>Student</th>\r\n                                            <th style={{ width: \"10%\" }}>Center</th>\r\n                                            <th style={{ width: \"10%\" }}>Lesson</th>\r\n                                            <th style={{ width: \"10%\" }}>Course Status</th>\r\n                                            <th style={{ width: \"10%\" }}>Review Status 1</th>\r\n                                            <th style={{ width: \"10%\" }}>Review Status 2</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {\r\n                                            review.map((e, i) => (\r\n                                                <tr style={{ cursor: 'pointer' }} key={i} onClick={() => toLessonPage(e.id, 'assessment')}>\r\n                                                    <td>{e.name}</td>\r\n                                                    <td>{e.level}</td>\r\n                                                    <td>{e.students.map((s, sIdx) => (`${s.name}(${s.age}${s.gender.charAt(0)})${sIdx < e.students.length - 1 ? '/' : ''}`))}</td>\r\n                                                    <td>{e.center}</td>\r\n                                                    <td>\r\n                                                        <ProgressBar\r\n                                                            label={e.lastLesson}\r\n                                                            variant={e.courseStatus === 'Completed' ? 'success' : e.courseStatus === 'Cancelled' ? 'danger' : 'primary'}\r\n                                                            now={e.courseStatus === 'Cancelled' ? e.lessons.length : Math.round(e.lastLesson / e.lessons.length * 100)}\r\n                                                        />\r\n                                                        <br />\r\n                                                        {moment(e.lastLessonDate).format('MM/DD/YYYY')}\r\n                                                    </td>\r\n                                                    <td>{e.courseStatus}</td>\r\n                                                    <td>{e.reviewStatus1}</td>\r\n                                                    <td>{e.reviewStatus2}</td>\r\n                                                </tr>\r\n                                            ))\r\n                                        }\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            ) : null}\r\n\r\n        </React.Fragment >\r\n    );\r\n\r\n}","import React from 'react'\r\n\r\nimport { Switch, Route, useHistory, Link, NavLink } from 'react-router-dom'\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nimport Container from 'react-bootstrap/Container'\r\nimport Tabs from 'react-bootstrap/Tabs'\r\nimport Tab from 'react-bootstrap/Tab'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Table from 'react-bootstrap/Table'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ProgressBar from 'react-bootstrap/ProgressBar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faStar as faSolidStar, faMarker, faBinoculars } from '@fortawesome/free-solid-svg-icons'\r\nimport { faStar, faSave } from '@fortawesome/free-regular-svg-icons'\r\n\r\nimport axios from 'axios'\r\nimport HomeCard from '../HomeCard'\r\nimport moment from 'moment'\r\n\r\nimport Rating from 'react-rating';\r\n\r\nvar student = {\r\n    id: undefined,\r\n    name: undefined,\r\n    age: undefined,\r\n    gender: undefined,\r\n}\r\nvar students = new Array(10).fill().map((e, i) => {\r\n    let newStudent = JSON.parse(JSON.stringify(student));\r\n    newStudent.id = i + 1;\r\n    newStudent.name = `Student ${i + 1}`;\r\n    newStudent.gender = Math.random() > 0.5 ? 'Female' : 'Male';\r\n    newStudent.age = Math.floor(Math.random() * (15 - 9 + 1)) + 9;\r\n    return newStudent;\r\n});\r\n// console.log(students);\r\n// console.log(Math.round(Math.random() * 1 + 1))\r\n// console.log(Math.random() > 0.5 ? 'Female' : 'Male')\r\n\r\nvar course = {\r\n    id: undefined,\r\n    name: undefined,\r\n    center: undefined,\r\n    level: undefined,\r\n    courseType: undefined,\r\n    lastLesson: undefined,\r\n    lastLessonDate: undefined,\r\n    tutors: undefined,\r\n    students: undefined,\r\n    reviewer: undefined,\r\n    lessons: undefined,\r\n    courseStatus: undefined,\r\n    reviewStatus1: undefined,\r\n    reviewStatus2: undefined,\r\n}\r\nfunction randomDate(start, end) {\r\n    return new Date(new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).setHours(0, 0, 0, 0));\r\n}\r\nvar courses = new Array(1).fill().map((e, i) => {\r\n    let newCourse = JSON.parse(JSON.stringify(course));\r\n    newCourse.id = i + 1;\r\n    newCourse.name = `Course ${i + 1}`;\r\n    newCourse.center = Math.random() > 0.5 ? 'Center A' : 'Center B';\r\n    newCourse.level = Math.round(Math.random() * 2 + 1);\r\n    newCourse.courseType = Math.random() > 0.5 ? Math.random() > 0.5 ? Math.random() > 0.5 ? 'Makeup Class' : 'Summer Camp' : 'Review' : 'Normal';\r\n    newCourse.lastLessonDate = randomDate(new Date(2019, 6, 1), new Date());\r\n    newCourse.tutors = [1];\r\n    // newCourse.students = new Array(3).fill().map((a, b) => students[Math.floor(Math.random() * 10)]);\r\n    newCourse.reviewer = 2;\r\n    newCourse.lessons = newCourse.courseType !== 'Summer Camp' ? new Array(12).fill().map((c, d) => d) : new Array(6).fill().map((c, d) => d);\r\n    newCourse.lastLesson = Math.floor(Math.random() * newCourse.lessons.length) + 1;\r\n    newCourse.courseStatus = newCourse.lastLesson === newCourse.lessons.length ? Math.random() > 0.5 ? 'Require Report' : 'Completed' : 'Ongoing';\r\n    // newCourse.courseStatus = Math.random() > 0.5 ? 'Await Report Submit' : Math.random() > 0.5 ? 'Await Review' : Math.random() > 0.5 ? 'Ongoing' : 'Completed';\r\n    newCourse.reviewStatus1 = newCourse.lastLesson >= newCourse.lessons.length / 2 ? Math.random() > 0.5 ? 'Require 1st Review' : 'Reviewed' : 'Await Report';\r\n    newCourse.reviewStatus2 = newCourse.lastLesson === newCourse.lessons.length ? newCourse.reviewStatus1 === 'Reviewed' ? Math.random() > 0.5 ? 'Require 2nd Review' : 'Reviewed' : 'Await 1st Review' : 'Await Report';\r\n    let randomStudentList = [];\r\n    for (var j = 0; j < 3; j++) {\r\n        let newStd = students[Math.floor(Math.random() * 10)];\r\n        while (!!randomStudentList.find(item => { return item.id == newStd.id })) {\r\n            newStd = students[Math.floor(Math.random() * 10)];\r\n        }\r\n        randomStudentList.push(newStd);\r\n    }\r\n    randomStudentList.sort(function (a, b) {\r\n        return a.id - b.id;\r\n    });\r\n    newCourse.students = randomStudentList;\r\n    return newCourse;\r\n});\r\n\r\nvar lesson = {\r\n    id: undefined,\r\n    name: undefined,\r\n    lessonNumber: undefined,\r\n    lessonDate: undefined,\r\n    tutor: undefined,\r\n    makeupTutor: undefined,\r\n    customAssessment: undefined,\r\n    objectives: undefined,\r\n}\r\nlet randomDateList = [];\r\nfor (var j = 0; j < 12; j++) {\r\n    let newDate = randomDate(new Date(2019, 6, 1), new Date());\r\n    while (!!randomDateList.find(item => { return item.getTime() == newDate.getTime() })) {\r\n        newDate = randomDate(new Date(2019, 6, 1), new Date());\r\n    }\r\n    randomDateList.push(newDate);\r\n}\r\nrandomDateList.sort(function (a, b) {\r\n    return a - b;\r\n});\r\n// courseIdx = Math.floor(Math.random() * 10) // 0 - 9\r\nvar courseIdx = 0\r\n// console.log(courses[courseIdx])\r\nvar lessons = new Array(courses[courseIdx].lessons.length).fill().map((e, i) => {\r\n    let newLesson = JSON.parse(JSON.stringify(lesson));\r\n    newLesson.id = i + 1;\r\n    newLesson.name = `Lesson ${i + 1}`;\r\n    newLesson.lessonNumber = i + 1;\r\n    newLesson.LessonDate = randomDateList[i];\r\n    newLesson.tutor = [process.env.REACT_APP_TUTOR];\r\n    newLesson.reviewer = [process.env.REACT_APP_REVIEWER];\r\n    newLesson.makeupTutor = null;\r\n    newLesson.customAssessment = Math.random() > 0.9;\r\n    newLesson.objectives = new Array(3).fill().map((a, b) => `Lesson ${i + 1} Objective ${b + 1}`);\r\n    return newLesson;\r\n});\r\nconst studentReports = {};\r\ncourses[courseIdx].students.forEach((s, sIdx) => {\r\n    studentReports[s.name] = {\r\n        name: s.name,\r\n        modified: false,\r\n        lastModified: moment(),\r\n        reports: lessons.map((l, lIdx) => {\r\n            let newReport = {\r\n                name: lessons[lIdx].name,\r\n                assessmentType: 'objective',\r\n                modified: false,\r\n                remarks: Math.random() > 0.9 ? 'Some random remarks' : '',\r\n                review: Math.random() > 0.9 ? 'Some random review' : '',\r\n                tutor: [\r\n                    process.env.REACT_APP_TUTOR\r\n                ],\r\n                reviewer: [\r\n                    process.env.REACT_APP_REVIEWER\r\n                ],\r\n                customAssessment: {\r\n                    content: '',\r\n                    grade: Math.floor(Math.random() * 5) + 1,\r\n                }\r\n            };\r\n            newReport.objectiveAssessment = lessons[lIdx].objectives.map((o, oIdx) => {\r\n                return {\r\n                    content: o,\r\n                    grade: Math.floor(Math.random() * 5) + 1,\r\n                };\r\n            });\r\n            return newReport\r\n        })\r\n    };\r\n});\r\n// console.log(studentReports)\r\n\r\nexport default function Course(props) {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const [tempSR, setTempSR] = React.useState(studentReports);\r\n    const [tracker, setTracker] = React.useState({});\r\n\r\n    const auth = useSelector(state => state.auth);\r\n\r\n    // React.useEffect(() => {\r\n    //     // axios.get()\r\n    // }, [])\r\n\r\n    const updateStudentReports = (val, studentName, reportIdx, objAssessmentIdx, attr) => {\r\n        setTempSR(prevState => {\r\n            let newStudentReports = {}\r\n            // newStudentReports = prevState[studentName]\r\n            newStudentReports = Object.assign(newStudentReports, prevState[studentName]);\r\n            if (attr === 'grade') {\r\n                newStudentReports.reports[reportIdx].objectiveAssessment[objAssessmentIdx].grade = val;\r\n            } else {\r\n                if (val === newStudentReports.reports[reportIdx][attr]) {\r\n                    return { ...prevState, [studentName]: newStudentReports };\r\n                }\r\n                newStudentReports.reports[reportIdx][attr] = val;\r\n            }\r\n            newStudentReports.reports[reportIdx].modified = true;\r\n            newStudentReports.modified = true;\r\n            newStudentReports.lastModified = moment();\r\n            // console.log(newStudentReports)\r\n            return { ...prevState, [studentName]: newStudentReports };\r\n        });\r\n    }\r\n\r\n    const onSubmit = (studentName) => {\r\n        setTempSR(prevState => {\r\n            let newStudentReports = {}\r\n            newStudentReports = Object.assign(newStudentReports, prevState[studentName]);\r\n            newStudentReports.reports = newStudentReports.reports.map((e, i) => {\r\n                e.modified = false;\r\n                return e\r\n            });\r\n            newStudentReports.modified = false;\r\n            return { ...prevState, [studentName]: newStudentReports };\r\n        });\r\n    }\r\n\r\n    // console.log(tempSR);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"p-3\">\r\n                <Tab.Container id=\"left-tabs-example\" defaultActiveKey={Object.keys(tempSR)[0]}>\r\n                    <Row>\r\n\r\n                        <Col sm={2}>\r\n                            <Nav variant=\"pills\" className=\"flex-column\">\r\n                                {Object.keys(tempSR).map((e, i) => (\r\n                                    <Nav.Item key={i}>\r\n                                        <Nav.Link eventKey={e}>\r\n                                            {e}\r\n                                            <div><Badge variant=\"light\">Last updated: {tempSR[e].lastModified.format('MMMM Do YYYY, HH:mm:ss')}</Badge></div>\r\n                                        </Nav.Link>\r\n                                    </Nav.Item>\r\n                                ))}\r\n                            </Nav>\r\n                        </Col>\r\n\r\n                        <Col sm={10}>\r\n                            <Tab.Content>\r\n                                {Object.keys(tempSR).map((studentName, studentNameIdx) => (\r\n                                    <Tab.Pane key={studentNameIdx} eventKey={studentName}>\r\n                                        <Form>\r\n                                            <Accordion>\r\n                                                {tempSR[studentName].reports.map((report, reportIdx) => (\r\n                                                    <Card key={reportIdx}>\r\n                                                        <Accordion.Toggle as={Card.Header} eventKey={`${studentNameIdx + '-' + reportIdx}`}>\r\n                                                            {report.name}\r\n                                                            {report.remarks !== '' ? (\r\n                                                                <React.Fragment>\r\n                                                                    &nbsp;\r\n                                                                    <OverlayTrigger\r\n                                                                        placement=\"top\"\r\n                                                                        overlay={<Tooltip>Contains remarks</Tooltip>}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faMarker} color=\"#ccc\" />\r\n                                                                    </OverlayTrigger>\r\n                                                                </React.Fragment>\r\n                                                            ) : null}\r\n                                                            {report.review !== '' ? (\r\n                                                                <React.Fragment>\r\n                                                                    &nbsp;\r\n                                                                    <OverlayTrigger\r\n                                                                        placement=\"top\"\r\n                                                                        overlay={<Tooltip>Contains review</Tooltip>}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faBinoculars} color=\"#ccc\" />\r\n                                                                    </OverlayTrigger>\r\n                                                                </React.Fragment>\r\n                                                            ) : null}\r\n                                                            {report.modified ? (\r\n                                                                <React.Fragment>\r\n                                                                    &nbsp;\r\n                                                                    <OverlayTrigger\r\n                                                                        placement=\"top\"\r\n                                                                        overlay={<Tooltip>Unsaved changes</Tooltip>}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faSave} color=\"#ff0000\" />\r\n                                                                    </OverlayTrigger>\r\n                                                                </React.Fragment>\r\n                                                            ) : null}\r\n                                                        </Accordion.Toggle>\r\n                                                        <Accordion.Collapse eventKey={`${studentNameIdx + '-' + reportIdx}`}>\r\n                                                            <Card.Body>\r\n                                                                {/* [form for {studentName} {report.name}] */}\r\n                                                                {report.objectiveAssessment.map((objAssessment, objAssessmentIdx) => (\r\n                                                                    <React.Fragment key={objAssessmentIdx}>\r\n                                                                        <Form.Group as={Row} style={{ borderBottom: '1px #eee solid' }} className='p-1' >\r\n                                                                            <Form.Label column sm={6}>\r\n                                                                                {objAssessment.content}\r\n                                                                            </Form.Label>\r\n                                                                            <Col sm={6}>\r\n                                                                                <Rating\r\n                                                                                    initialRating={objAssessment.grade}\r\n                                                                                    emptySymbol={<FontAwesomeIcon icon={faStar} color=\"#e6e600\" />}\r\n                                                                                    fullSymbol={<FontAwesomeIcon icon={faSolidStar} color=\"#e6e600\" />}\r\n                                                                                    onChange={(rate) => updateStudentReports(rate, studentName, reportIdx, objAssessmentIdx, 'grade')}\r\n                                                                                />\r\n                                                                            </Col>\r\n                                                                        </Form.Group>\r\n                                                                    </React.Fragment>\r\n                                                                ))}\r\n                                                                {report.tutor.includes(auth.user._id) ? (\r\n                                                                    <Form.Group as={Row} className='p-1'>\r\n                                                                        <Col sm={12}>\r\n                                                                            <Form.Control\r\n                                                                                type=\"text\"\r\n                                                                                placeholder=\"remarks\"\r\n                                                                                as='textarea'\r\n                                                                                // onChange={(e) => updateStudentReports(e.target.value, studentName, reportIdx, null, 'remarks')}\r\n                                                                                // value={report.remarks}\r\n                                                                                defaultValue={report.remarks}\r\n                                                                                onBlur={(e) => updateStudentReports(e.target.value, studentName, reportIdx, null, 'remarks')}\r\n                                                                            // readOnly={lesson.tutor.includes(auth.user._id) ? false : true}\r\n                                                                            // value={assessment.remarks[0].comment === '' ? 'No comment on remarks' : assessment.remarks[0].comment}\r\n                                                                            // onChange={(e) => updateAlist(e, lessonIdx, assessmentIdx, null, 'remarks')}\r\n                                                                            />\r\n                                                                        </Col>\r\n                                                                    </Form.Group>\r\n                                                                ) : report.remarks !== '' ? (\r\n                                                                    <Alert show={true} variant=\"secondary\">\r\n                                                                        <p>\r\n                                                                            {report.remarks}\r\n                                                                        </p>\r\n\r\n                                                                    </Alert>\r\n                                                                ) : null}\r\n                                                                {report.reviewer.includes(auth.user._id) ? (\r\n                                                                    <Form.Group as={Row} className='p-1' >\r\n                                                                        <Col sm={12}>\r\n                                                                            <Form.Control\r\n                                                                                type=\"text\"\r\n                                                                                placeholder=\"review\"\r\n                                                                                as='textarea'\r\n                                                                                // onChange={(e) => updateStudentReports(e.target.value, studentName, reportIdx, null, 'review')}\r\n                                                                                // value={report.review}\r\n                                                                                defaultValue={report.review}\r\n                                                                                onBlur={(e) => updateStudentReports(e.target.value, studentName, reportIdx, null, 'review')}\r\n                                                                            // readOnly={lesson.reviewer.includes(auth.user._id) ? false : true}\r\n                                                                            // value={assessment.review[0].comment === '' ? 'No comment on review' : assessment.review[0].comment}\r\n                                                                            // onChange={(e) => updateAlist(e, lessonIdx, assessmentIdx, null, 'review')}\r\n                                                                            />\r\n                                                                        </Col>\r\n                                                                    </Form.Group>\r\n                                                                ) : report.review !== '' ? (\r\n                                                                    <Alert show={true} variant=\"secondary\">\r\n                                                                        <p>\r\n                                                                            {report.review}\r\n                                                                        </p>\r\n\r\n                                                                    </Alert>\r\n                                                                ) : null}\r\n                                                                {/* <div className=\"m-2\">\r\n                                                                    <Button variant=\"primary\">Add Remarks</Button>\r\n                                                                </div>\r\n                                                                <div className=\"m-2\">\r\n                                                                    <Button variant=\"warning\">Add Review</Button>\r\n                                                                </div> */}\r\n                                                                <div className=\"m-2\">\r\n                                                                    <Button\r\n                                                                        variant=\"success\"\r\n                                                                        disabled={tempSR[studentName].modified ? false : true}\r\n                                                                        onClick={() => onSubmit(studentName)}\r\n                                                                    >\r\n                                                                        Update &amp; Save\r\n                                                                    </Button>\r\n                                                                </div>\r\n                                                                {/* <ButtonGroup>\r\n                                                                    <Button variant=\"primary\">Add Remarks</Button>\r\n                                                                    <Button variant=\"warning\">Add Review</Button>\r\n                                                                    <Button\r\n                                                                        variant=\"success\"\r\n                                                                        disabled={tempSR[studentName].modified ? false : true}\r\n                                                                        onClick={() => onSubmit(studentName)}\r\n                                                                    >\r\n                                                                        Update &amp; Save\r\n                                                                    </Button>\r\n                                                                </ButtonGroup> */}\r\n                                                                {/* <div>\r\n                                                                    <small className=\"text-muted\">Last updated 3 mins ago</small>\r\n                                                                </div> */}\r\n                                                            </Card.Body>\r\n                                                        </Accordion.Collapse>\r\n                                                    </Card>\r\n                                                ))}\r\n                                            </Accordion>\r\n                                        </Form>\r\n                                    </Tab.Pane>\r\n                                ))}\r\n                            </Tab.Content>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </Tab.Container>\r\n            </div>\r\n        </React.Fragment >\r\n    );\r\n\r\n}","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n// import PropTypes from 'prop-types';\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props => {\r\n            // console.log(auth);\r\n            if (auth.isLoading) {\r\n                // return <h2>Loading...</h2>;\r\n                return (\r\n                    <Spinner animation=\"border\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                );\r\n            } else if (!auth.isAuthenticated) {\r\n                return <Redirect to=\"/signin\" />;\r\n            } else {\r\n                return <Component {...props} />;\r\n            }\r\n        }}\r\n    />\r\n)\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n})\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React from 'react';\nimport './App.css';\n\nimport { Switch, Route, HashRouter } from 'react-router-dom';\n\nimport { Provider, useDispatch } from \"react-redux\";\nimport store from \"./store\";\nimport { loadUser } from './actions/authActions';\n\nimport Container from 'react-bootstrap/Container';\n\nimport TopNavbar from './components/TopNavbar';\nimport Signin from './components/page/Signin';\nimport SyllabusPlanning from './components/page/SyllabusPlanning';\nimport Course from './components/page/Course';\n\nimport PrivateRoute from './components/common/PrivateRoute';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Wrapper />\n    </Provider>\n  );\n}\n\nfunction Wrapper() {\n\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    dispatch(loadUser());\n  }, [])\n\n  return (\n    <HashRouter basename='/'>\n      <TopNavbar />\n      <Container fluid>\n        <Switch>\n          <Route path=\"/signin\">\n            <Signin />\n          </Route>\n          <PrivateRoute exact path=\"/\" component={SyllabusPlanning} />\n          <PrivateRoute path=\"/course/:id\" component={Course} />\n        </Switch>\n      </Container>\n    </HashRouter>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}